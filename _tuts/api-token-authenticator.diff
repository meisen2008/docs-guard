diff --git a/app/config/security.yml b/app/config/security.yml
index 4b8250a..4b0f066 100644
--- a/app/config/security.yml
+++ b/app/config/security.yml
@@ -19,6 +19,10 @@ security:
             logout: ~
             # activate different ways to authenticate
 
+            guard:
+                authenticators:
+                    - app.token_authenticator
+
             # http_basic: ~
             # http://symfony.com/doc/current/book/security.html#a-configuring-how-your-users-will-authenticate
 
diff --git a/app/config/services.yml b/app/config/services.yml
index 5c76fc5..7ee1cd1 100644
--- a/app/config/services.yml
+++ b/app/config/services.yml
@@ -4,6 +4,6 @@ parameters:
 #    parameter_name: value
 
 services:
-#    service_name:
-#        class: AppBundle\Directory\ClassName
-#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]
+    app.token_authenticator:
+        class: AppBundle\Security\TokenAuthenticator
+        arguments: ['@doctrine.orm.entity_manager']
diff --git a/src/AppBundle/Security/TokenAuthenticator.php b/src/AppBundle/Security/TokenAuthenticator.php
new file mode 100644
index 0000000..8653398
--- /dev/null
+++ b/src/AppBundle/Security/TokenAuthenticator.php
@@ -0,0 +1,92 @@
+<?php
+
+namespace AppBundle\Security;
+
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Security\Core\User\UserInterface;
+use Symfony\Component\Security\Guard\AbstractGuardAuthenticator;
+use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
+use Symfony\Component\Security\Core\Exception\AuthenticationException;
+use Symfony\Component\Security\Core\User\UserProviderInterface;
+use Doctrine\ORM\EntityManager;
+
+class TokenAuthenticator extends AbstractGuardAuthenticator
+{
+    private $em;
+
+    public function __construct(EntityManager $em)
+    {
+        $this->em = $em;
+    }
+
+    /**
+     * Called on every request. Return whatever credentials you want,
+     * or null to stop authentication.
+     */
+    public function getCredentials(Request $request)
+    {
+        if (!$token = $request->headers->get('X-AUTH-TOKEN')) {
+            // no token? Return null and no other methods will be called
+            return;
+        }
+
+        // What we return here will be passed to getUser() as $credentials
+        return array(
+            'token' => $token,
+        );
+    }
+
+    public function getUser($credentials, UserProviderInterface $userProvider)
+    {
+        $apiToken = $credentials['token'];
+
+        // if null, authentication will fail
+        // if a User object, checkCredentials() is called
+        return $this->em->getRepository('AppBundle:User')
+            ->findOneBy(array('apiToken' => $apiToken));
+    }
+
+    public function checkCredentials($credentials, UserInterface $user)
+    {
+        // check credentials - e.g. make sure the password is valid
+        // no credential check is needed in this case
+
+        // return true to cause authentication success
+        return true;
+    }
+
+    public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey)
+    {
+        // on success, let the request continue
+        return null;
+    }
+
+    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)
+    {
+        $data = array(
+            // you might translate this message
+            'message' => strtr($exception->getMessageKey(), $exception->getMessageData())
+        );
+
+        return new Response(json_encode($data), 403);
+    }
+
+    /**
+     * Called when authentication is needed, but it's not sent
+     */
+    public function start(Request $request, AuthenticationException $authException = null)
+    {
+        $data = array(
+            // you might translate this message
+            'message' => 'Authentication Required'
+        );
+
+        return new Response(json_encode($data), 401);
+    }
+
+    public function supportsRememberMe()
+    {
+        return false;
+    }
+}
